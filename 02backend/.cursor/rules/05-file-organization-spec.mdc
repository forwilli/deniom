---
description: 
globs: 
alwaysApply: true
---
# Deniom 后端文件组织规范 (v2.0 - 模块化架构)

为确保代码库的清晰、可维护和可扩展性，所有新编写或修改的代码文件**必须**严格遵守“按功能分离”的模块化架构。

## 1. 核心目录结构 (`src` layout)

- **`src/`**: **唯一**存放所有核心应用代码的目录。
- **`main.py` (根目录)**: **唯一**的应用启动入口，应保持轻量。
- **`run_cli.py`**: **唯一**的命令行工具入口。
- **`tests/`**: **唯一**的自动化测试存放目录。

## 2. 功能模块化原则 (`src/features/`)

- **高内聚，低耦合**: 每个核心功能（如 `projects`）都应拥有自己独立的模块目录。
- **模块内部结构**: 每个功能模块应包含以下文件：
    - `router.py`: API路由 (FastAPI)。
    - `service.py`: 核心业务逻辑。
    - `models.py`: 数据库模型 (SQLModel)。
    - `schemas.py`: API数据契约 (Pydantic)。
    - `__init__.py`: 使目录成为一个Python模块。

## 3. 共享代码目录

- **`src/core/`**: **唯一**存放项目级核心配置。
    - `config.py`: 应用配置与环境变量。
    - `database.py`: 数据库连接与会话管理。
- **`src/clients/`**: **唯一**存放与外部服务交互的客户端。
    - `github.py`: GitHub API 客户端。
    - `analysis.py`: AI 分析服务客户端。

## 4. 任务完成检查流程

- **提交前自查**: 在完成一个主要功能或任务时，**必须**进行最终审查。
- **检查清单**:
    - [ ] **模块化**: 新功能是否已创建为独立的模块？
    - [ ] **职责分离**: API、业务逻辑、数据模型、数据契约是否已正确分离到 `router`, `service`, `models`, `schemas` 文件中？
    - [ ] **无冗余文件**: 是否已删除所有临时的调试文件？
    - [ ] **入口点干净**: 是否保持了根目录 `main.py` 和 `run_cli.py` 的简洁性？

- **渐进式交付**: 只有在确保所有检查点都通过后，才能认为当前任务完成。
