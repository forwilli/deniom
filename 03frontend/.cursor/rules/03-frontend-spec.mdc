---
description: 
globs: 
alwaysApply: true
---
# Deniom 前端 (`03frontend`) 规范 (v3.0)

当生成或修改前端代码时，**必须**遵循以下规则。

## 1. 核心技术栈与风格

- **框架**: **必须** 使用 `Next.js 14`，并优先使用 `App Router` 模式。
- **语言**: **必须** 使用 `TypeScript`，并开启严格模式 (`strict: true`)。
- **状态管理**:
    - **服务端缓存/状态**: **必须** 使用 `@tanstack/react-query` (`useQuery`, `useInfiniteQuery`) 管理所有与 API 交互的缓存和状态。
    - **客户端状态**: 优先使用 React Hooks (`useState`, `useReducer`)。对于跨组件的复杂状态，可使用 `Zustand` 或 `Jotai`，避免使用 Redux。
- **样式**: **必须** 使用 `Tailwind CSS` 作为主要样式方案。对于组件的动态样式，使用 `clsx` 或 `tailwind-merge` 进行组合。
- **代码风格**: **必须** 使用 `ESLint` 和 `Prettier` 强制执行代码风格，确保代码一致性。

## 2. 架构原则

- **组件化**:
    - **原子化**: UI 逻辑 **必须** 拆分为可复用的、功能单一的 React 组件，存放于 `03frontend/components/` 目录。
    - **页面组件**: 页面级组件存放于 `03frontend/app/` 目录下对应的路由文件夹中。
    - **命名**: 组件文件名 **必须** 使用 `PascalCase.tsx` (例如 `OpportunityCard.tsx`)。
    - **Props 定义**: 所有组件 **必须** 为其 `props` 定义明确的 TypeScript 接口或类型。
- **数据流**:
    - **单向数据流**: 严格遵循单向数据流原则。
    - **服务端数据获取**: **必须** 在 Server Components 或 Next.js 的数据获取函数（`getServerSideProps`, `getStaticProps`）中进行初始数据获取。
    - **客户端数据同步**: **必须** 使用 `React Query` 的 `useQuery` 和 `useMutation` hooks 来与后端 API 同步数据。
- **目录结构**:
    - `components/`: 存放原子化的、可复用的UI组件。
    - `lib/`: 存放工具函数、API客户端、Hooks等。
    - `app/`: 存放页面路由和布局。

## 3. API 调用

- **请求封装**: 所有对后端 API 的请求 **必须** 通过 `03frontend/lib/api/` 中封装的客户端 (`axios` 或 `fetch`) 和服务函数进行。
- **类型安全**: API 服务函数 **必须** 返回带有明确 TypeScript 类型的数据，最好与后端 Pydantic `Schema` 对应。
- **错误处理**: **必须** 在 API 调用层进行统一的错误处理，并将错误状态传递给UI层。

## 4. 样式系统 (`Tailwind CSS`)

- **工具类优先**: **必须** 优先使用 Tailwind CSS 的原子工具类来构建样式。
- **禁止内联样式**: **严禁**使用 `style` 属性编写内联样式，除非是动态计算的样式（如动画）。
- **主题扩展**: **必须** 在 `tailwind.config.js` 的 `theme.extend` 中定义项目的设计规范（颜色、字体、间距等），而不是在代码中硬编码。
- **组件样式封装**: 对于可复用的复杂组件样式组合，推荐使用 `class-variance-authority` (CVA) 进行封装。

## 5. 测试

- **框架**: **必须** 使用 `Vitest` 或 `Jest` 作为测试框架。
- **UI 测试**: **必须** 使用 `React Testing Library` 进行组件测试，遵循用户交互优先的测试原则。
- **Mocking**: **必须** 使用 `Mock Service Worker (MSW)` 或 `nock` 来模拟 API 请求，确保测试的独立性和稳定性。
- **测试覆盖率**: 关键业务组件和逻辑 **必须** 有相应的单元或集成测试。



