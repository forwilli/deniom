---
description: 
globs: 
alwaysApply: true
---
# Deniom 全局架构与开发铁律 (v4.0)

本文档是 Deniom 项目的最高开发准则，所有贡献者必须严格遵守。

## 1. 核心原则与文件结构

1.  **绝对前后端分离**: 项目 **必须** 遵循严格的前后端分离模式。前端与后端是两个独立的应用，只能通过 RESTful API 进行通信。
2.  **最终目录结构**: 项目的顶级目录结构 **必须** 且**只能** 如下所示，以保持项目的一致性：
    ```
    /
    ├── 01base/          # 项目核心文档 (架构、日志等)
    ├── 02backend/       # 后端 FastAPI 应用
    │   └── .cursor/
    │       └── rules/   # 后端专属规则
    ├── 03frontend/      # 前端 Next.js 应用
    │   └── .cursor/
    │       └── rules/   # 前端专属规则
    ├── .cursor/         # 全局 AI 规则目录
    │   └── rules/
    │       └── 01-global-architecture.mdc
    └── .gitignore
    ```
3.  **单一数据源**: 后端 API 是前端应用的**唯一**数据来源。前端严禁直接访问数据库或任何后端内部资源。
4.  **渐进式开发**: [严格遵循渐进式开发，一个功能一个功能地完成和验证，确保稳定后再进入下一个。][[memory:650244809697069432]]

## 2. 通用开发规范

1.  **版本控制 (Conventional Commits)**: 所有 Git 提交信息 **必须** 遵循 [Conventional Commits](mdc:denoim/denoim/https:/www.conventionalcommits.org) 规范，格式为 `<type>(<scope>): <subject>`。
    *   `feat`: 新功能
    *   `fix`: Bug修复
    *   `refactor`: 代码重构
    *   `style`: 格式调整
    *   `docs`: 文档变更
    *   `test`: 测试相关
    *   `chore`: 构建过程或辅助工具的变动
2.  **分支策略**:
    *   **主分支 (`main`)**: 只能包含生产就绪的代码。所有变更必须通过 Pull Request 合入。
    *   **开发分支 (`develop`)**: 主要的开发分支，新功能从这里拉出。
    *   **功能分支 (`feat/...`)**: 用于开发新功能，完成后合并回 `develop`。
3.  **命名**:
    *   **目录/文件名 (通用)**: `kebab-case` (例如 `user-profile`, `api-client`)
    *   **Python/JS变量/函数**: `snake_case` (例如 `get_user_data`)
    *   **类名**: `PascalCase` (例如 `AnalysisService`)
4.  **日志**: 核心业务逻辑 **必须** 使用结构化日志（后端 `logging`，前端 `console.log`），禁止使用 `print()` 进行调试输出。
5.  **测试**: 关键业务逻辑和服务 **必须** 有单元测试或集成测试覆盖。

## 3. AI 与提示工程

1.  **结构化角色提示**: 所有对大语言模型 (LLM) 的调用 **必须** 使用结构化的角色提示，包含**角色、任务、上下文、输出格式**四个要素。
2.  **模型选型**: 标准分析任务 **必须** 使用 `gemini-2.5-flash` 模型，在 `02backend/app/core/config.py` 中配置。[[memory:2402326148963585433]]
3.  **健壮性**: 对外部 API（特别是 Gemini）的核心调用应使用 `tenacity` 库进行封装，实现指数退避重试。
4.  **输出格式优先 JSON**: **必须** 优先要求 LLM 返回 JSON 格式，并有健壮的解析逻辑（包括处理不完美的 JSON 输出）。

## 4. CI/CD (持续集成/持续交付)

1.  **自动化**: 构建、测试、部署流程应尽可能自动化。
2.  **分阶段执行**: 流水线应包含清晰的阶段：`Build` -> `Test` -> `Deploy`。
3.  **失败即停**: 任何阶段的失败都应立即中止流水线，防止问题代码进入下一环节。
4.  **环境变量**: 使用环境变量管理敏感信息和环境配置，严禁硬编码。









