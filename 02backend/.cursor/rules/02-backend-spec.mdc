---
description: 
globs: 
alwaysApply: true
---
# Deniom 后端 (`02backend`) 规范 (v3.0)

当生成或修改后端代码时，**必须**遵循以下规则。

## 1. 核心技术栈与风格

- **框架**: **必须** 使用 `FastAPI` 构建，充分利用其异步特性 (`async/await`) 和依赖注入系统。
- **数据验证**: **必须** 使用 `Pydantic` 定义所有数据输入（请求体、查询参数）和输出（响应体）的 `Schema`，以实现自动数据验证和文档生成。
- **数据库 ORM**: **必须** 使用 `SQLModel` 进行数据建模和交互。
- **代码风格**: **必须** 遵循 `PEP 8` 规范，推荐使用 `black` 和 `isort` 进行自动格式化。
- **类型提示**: 所有函数定义、变量声明 **必须** 包含完整的类型提示 (`typing`)。

## 2. 架构原则

- **服务分离 (SoA)**: 严格遵守关注点分离原则，这是后端架构的基石。
    -   `github_service.py`: **唯一**负责与 GitHub API 的所有交互。
    -   `analysis_service.py`: **唯一**负责所有对项目的 AI 分析。
    -   `market_service.py`: **唯一**负责所有外部市场环境的分析。
    -   `opportunity_service.py`: **唯一**负责编排核心业务逻辑，调用其他服务。
- **依赖注入 (DI)**:
    - **必须** 使用 FastAPI 的依赖注入系统 (`Depends`) 来管理依赖，如数据库会话、服务实例等。
    - **禁止**在路由处理函数中手动实例化服务或数据库会话。
- **数据持久化**: 分析流程的每个阶段完成后，其产出 **必须** 立即持久化到数据库中，以实现流程的容错性。

**示例：错误的服务调用**
```python
# 在 opportunity_service.py 中直接调用 httpx 是错误的
# import httpx  <-- 错误

# 正确的做法是调用已经封装好的 service
from app.services.github_service import github_service

# ...
raw_data = await github_service.fetch_new_projects()
```

## 3. API 设计

- **RESTful 原则**: 所有端点 **必须** 遵循 RESTful 设计原则，使用正确的 HTTP 方法 (`GET`, `POST`, `PUT`, `DELETE`)。
- **版本管理**: API **必须** 进行版本管理，所有路由置于 `/api/v1/` 前缀下。
- **路由组织**: 使用 `APIRouter` 将相关的端点组织在各自的模块文件中。
- **响应模型**: **必须** 在路由装饰器中使用 `response_model` 参数来定义响应的 `Schema`，确保数据格式的一致性和文档的准确性。
- **错误处理**:
    - 对于预期的客户端错误（如资源未找到），**必须** 抛出 `HTTPException` 并提供清晰的 `detail` 信息。
    - 对于服务端内部错误，应在全局异常处理器中捕获，并返回统一的 500 错误响应，避免泄露内部实现细节。

## 4. 数据库与模型

- **模型定义 (`SQLModel`)**:
    - 模型类 **必须** 继承自 `SQLModel`。
    - 清晰地定义字段类型、关系 (`Relationship`) 和约束。
- **数据库会话管理**:
    - **必须** 通过依赖注入提供数据库会话。
    - **必须** 使用 `try...finally` 或上下文管理器来确保会话在使用后被关闭。
- **查询优化**:
    - **避免 N+1 问题**: 在查询关联数据时，**必须** 使用 `selectinload` 或 `joinedload` 进行预加载。
    - **使用 `select()`**: 优先使用 SQLAlchemy Core 的 `select()` 表达式构建查询，以获得更好的性能和灵活性。

## 5. 测试

- **框架**: **必须** 使用 `pytest` 作为测试框架。
- **客户端**: **必须** 使用 `TestClient` 或 `AsyncClient` 来测试 API 端点。
- **数据库测试**:
    - **必须** 使用独立的测试数据库（如内存中的 SQLite）进行测试，避免污染开发数据库。
    - **必须** 在每个测试用例开始前创建干净的表结构，并在结束后清理。
- **依赖覆盖**: **必须** 使用 FastAPI 的 `dependency_overrides` 功能来模拟服务或数据库会a话，以实现真正的单元测试。



