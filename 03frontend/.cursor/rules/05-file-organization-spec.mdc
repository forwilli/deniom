---
description: 
globs: 
alwaysApply: true
---
# Deniom 前端文件组织规范 (v2.0 - 功能切片架构)

为确保前端代码库的清晰、可维护和可扩展性，所有新编写或修改的代码文件**必须**严格遵守“功能切片设计”(Feature-Sliced Design)架构。

## 1. 核心目录结构 (`src` layout)

- **`src/`**: **唯一**存放所有核心应用代码的目录。
- **`src/app/`**: **路由层**. 仅包含Next.js的路由、页面和布局文件，应保持轻量。
- **`src/components/`**: **共享UI层**. 仅存放真正全局共享的、与业务无关的UI组件 (如 `PageLayout`, `Navbar`)。
    - `ui/`: 基础UI元素 (如 `Button`, `Card`)。
- **`src/lib/`**: **共享库层**. 仅存放全局共享的、与功能无关的核心代码 (如 `api-client`, `config`, `utils`)。
- **`src/features/`**: **功能层**. 项目的核心，按业务功能划分。

## 2. 功能切片原则 (`src/features/`)

- **高内聚**: 每个核心业务功能（如 `project-list`）都应拥有自己独立的"切片"目录。
- **切片内部结构**: 每个功能切片应包含所有与该功能相关的代码：
    - `components/`: 此功能专属的React组件。
    - `hooks/` 或 `useFeatureName.ts`: 此功能专属的React Hooks。
    - `api.ts`: 此功能专属的API调用。
    - `types.ts`: 此功能专属的TypeScript类型。
    - `index.ts`: 导出该功能需要暴露给外部的公共接口 (组件、Hooks等)。

## 3. 任务完成检查流程

- **提交前自查**: 在完成一个主要功能或任务时，**必须**进行最终审查。
- **检查清单**:
    - [ ] **功能切片**: 新功能是否已创建为独立的`feature`切片？
    - [ ] **职责分离**: 是否将仅用于某一功能的组件、Hook或API调用错误地放在了全局的`components`或`lib`目录中？
    - [ ] **无冗余文件**: 是否已删除所有临时的调试文件？
    - [ ] **轻量路由**: 是否保持了 `app/` 目录中页面和布局的轻量，将复杂逻辑移入了`features`？

- **渐进式交付**: 只有在确保所有检查点都通过后，才能认为当前任务完成。
