---
description: 
globs: 
alwaysApply: true
---
# 全局架构原则 (v1.0)

本文件定义了 Deniom 项目跨越前后端的统一架构哲学和核心设计原则。它是评估所有技术决策和代码贡献的最高标准。

## 核心哲学：模块化与功能内聚

我们坚信，一个可维护、可扩展的系统建立在"高内聚、低耦合"的基础之上。因此，整个项目（无论前端还是后端）都必须遵循**按功能分离 (Separation by Feature)** 的架构模式。

这意味着，所有与单一业务功能相关的代码，都应该被组织在一个独立的、自包含的模块中。

## 1. 后端架构：模块化服务 (`src/features/`)

- **强制要求**: 所有后端业务逻辑都必须在 `02backend/src/` 目录下，以独立的**功能模块**形式存在。
- **模块结构**: 每个模块必须包含清晰的 `router.py`, `service.py`, `models.py`, 和 `schemas.py`，以强制实现职责分离。
- **参考规范**: `02backend/.cursor/rules/05-file-organization-spec.mdc`

## 2. 前端架构：功能切片设计 (Feature-Sliced Design)

- **强制要求**: 所有前端业务功能都必须在 `03frontend/src/features/` 目录下，以独立的**功能切片**形式存在。
- **切片结构**: 每个切片必须聚合与该功能相关的所有代码，包括其专属的组件、Hooks、API调用和类型定义。
- **参考规范**: `03frontend/.cursor/rules/05-file-organization-spec.mdc`

## 3. 统一任务流程

- **渐进式开发**: 所有开发工作都必须遵循"一个功能一个功能地完成"的原则。
- **提交前自查**: 在每个主要功能完成时，开发者必须对照相应模块的组织规范进行自查，确保代码的结构正确性。
- **禁止临时文件**: **严禁**将任何一次性的、用于调试的脚本或文件提交到版本库中。

这些原则是不可违背的。任何不符合此架构哲学的代码提交都将被视为技术债务，并需要被重构。
